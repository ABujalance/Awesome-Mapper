{"version":3,"sources":["logo.svg","Actions/index.js","components/NewMapForm.js","components/Tile.js","components/Map.js","App.js","serviceWorker.js","reducers/mapReducer.js","index.js"],"names":["module","exports","INCREASE_COUNT","DECREASE_COUNT","CREATE_MAP","NewMapForm","props","dispatch","useDispatch","useState","xTiles","setxTiles","yTiles","setyTiles","onSubmit","e","preventDefault","type","Actions","xSize","ySize","value","onChange","target","name","min","max","Tile","tileType","imgUrl","process","src","renderMapRow","tileRow","index","key","map","AwesomeMap","tiles","useSelector","state","awesomeMap","className","tileTypes","App","aria-label","tileName","onClick","alert","clickNewTile","href","rel","Boolean","window","location","hostname","match","initialState","createNewMap","x","y","newMap","Array","i","row","j","push","store","createStore","action","ActionTypes","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92b26fd2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const CounterTypes = {\r\n  INCREASE_COUNT: \"INCREASE_COUNT\",\r\n  DECREASE_COUNT: \"DECREASE_COUNT\",\r\n  CREATE_MAP: \"CREATE_MAP\",\r\n};\r\nexport default {\r\n  ...CounterTypes,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Actions from \"../Actions\";\r\n\r\nconst NewMapForm = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [xTiles, setxTiles] = useState(1);\r\n  const [yTiles, setyTiles] = useState(1);\r\n\r\n  const handleNewMapSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch({ type: Actions.CREATE_MAP, xSize: xTiles, ySize: yTiles });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleNewMapSubmit}>\r\n        <label>X nº of tiles: </label>\r\n        <input\r\n          value={xTiles}\r\n          onChange={(e) => setxTiles(e.target.value)}\r\n          type=\"number\"\r\n          name=\"xTiles\"\r\n          min=\"1\"\r\n          max=\"50\"\r\n        />\r\n        <br />\r\n        <label>Y nº of tiles: </label>\r\n        <input\r\n          value={yTiles}\r\n          onChange={(e) => setyTiles(e.target.value)}\r\n          type=\"number\"\r\n          name=\"yTiles\"\r\n          min=\"1\"\r\n          max=\"50\"\r\n        />\r\n        <br />\r\n        <button type=\"submit\">Generate new Map!</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewMapForm;\r\n","import React from \"react\";\r\n\r\nconst Tile = (props) => {\r\n  const tileType = props.tileType;\r\n  const imgUrl = tileType\r\n    ? process.env.PUBLIC_URL + \"/images/\" + tileType\r\n    : process.env.PUBLIC_URL + \"/images/empty.png\";\r\n  return (\r\n    <td>\r\n      <div>\r\n        <img src={imgUrl} />\r\n      </div>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst AwesomeMap = (props) => {\r\n  const tiles = useSelector((state) => state.awesomeMap);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"awesome-map\">{tiles.map(renderMapRow)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderMapRow = (tileRow, index) => {\r\n  return (\r\n    <tr key={index}>\r\n      {tileRow.map((tileType) => {\r\n        return <Tile tileType={tileType} />;\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default AwesomeMap;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport NewMapForm from \"./components/NewMapForm\";\n\nimport AwesomeMap from \"./components/Map\";\n\nconst tileTypes = [\"grass.png\", \"water.png\"];\n\nconst startingTiles = [\n  [\"grass.png\", \"grass.png\", \"grass.png\", \"grass.png\", \"grass.png\", \"\"],\n  [\"grass.png\", \"water.png\", \"water.png\", \"\", \"water.png\", \"water.png\"],\n  [\"grass.png\", \"water.png\", \"grass.png\", \"grass.png\", \"grass.png\", \"\"],\n  [\"grass.png\", \"water.png\", \"water.png\", \"water.png\", \"grass.png\", \"\"],\n  [\"grass.png\", \"water.png\", \"water.png\", \"water.png\", \"grass.png\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\"],\n];\n\nfunction App() {\n  const clickNewTile = (tileType) => {\n    alert(tileType);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AwesomeMap />\n        <div className=\"btn-group\" aria-label=\"Tiles\">\n          {tileTypes.map((tileName, index) => {\n            var tileType = process.env.PUBLIC_URL + \"/images/\" + tileName;\n            return (\n              <a onClick={() => clickNewTile(tileName)}>\n                <img src={tileType}></img>\n              </a>\n            );\n          })}\n        </div>\n        <NewMapForm />\n        <p>Welcome to Awesome Mapper!</p>\n        This project is being developed by\n        <a\n          className=\"App-link\"\n          href=\"https://abujalance.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Abujalance\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ActionTypes from \"../Actions\";\r\nconst initialState = {\r\n  awesomeMap: [\r\n    [\"\", \"\", \"\"],\r\n    [\"\", \"\", \"\"],\r\n    [\"\", \"\", \"\"],\r\n  ],\r\n};\r\nexport default function mapReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ActionTypes.CREATE_MAP:\r\n      const xSize = action.xSize;\r\n      const ySize = action.ySize;\r\n      return { awesomeMap: createNewMap(xSize, ySize) };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst createNewMap = (x, y) => {\r\n  var newMap = new Array(y);\r\n  for (var i = 0; i < y; i++) {\r\n    var row = [];\r\n    for (var j = 0; j < x; j++) {\r\n      row.push(\"\");\r\n    }\r\n    newMap[i] = row;\r\n  }\r\n\r\n  return newMap;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport mapReducer from \"./reducers/mapReducer\";\n\nconst store = createStore(mapReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}