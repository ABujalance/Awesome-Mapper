{"version":3,"sources":["logo.svg","Actions/index.js","components/NewMapForm.js","components/Tile.js","components/Map.js","components/TilesGallery.js","App.js","serviceWorker.js","reducers/mapReducer.js","index.js"],"names":["module","exports","CREATE_MAP","CHANGE_DRAGGED_ELEMENT","PLACE_TILE","NewMapForm","props","dispatch","useDispatch","useState","xTiles","setxTiles","yTiles","setyTiles","onSubmit","e","preventDefault","type","Actions","xSize","ySize","value","onChange","target","name","min","max","Tile","draggedElement","useSelector","state","tileType","index","imgUrl","process","onDrop","event","y","parentNode","getAttribute","x","tileName","onDragOver","src","renderMapRow","tileRow","key","map","columnIndex","AwesomeMap","tiles","awesomeMap","className","TilesGallery","tileTypes","aria-label","draggable","onDrag","App","href","rel","Boolean","window","location","hostname","match","initialState","createNewMap","newMap","Array","i","row","j","push","insertTile","console","log","table","store","createStore","action","ActionTypes","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb09a1a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const CounterTypes = {\r\n  CREATE_MAP: \"CREATE_MAP\",\r\n  CHANGE_DRAGGED_ELEMENT: \"CHANGE_DRAGGED_ELEMENT\",\r\n  PLACE_TILE: \"PLACE_TILE\",\r\n};\r\nexport default {\r\n  ...CounterTypes,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Actions from \"../Actions\";\r\n\r\nconst NewMapForm = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [xTiles, setxTiles] = useState(1);\r\n  const [yTiles, setyTiles] = useState(1);\r\n\r\n  const handleNewMapSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch({ type: Actions.CREATE_MAP, xSize: xTiles, ySize: yTiles });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleNewMapSubmit}>\r\n        <label>X nº of tiles: </label>\r\n        <input\r\n          value={xTiles}\r\n          onChange={(e) => setxTiles(e.target.value)}\r\n          type=\"number\"\r\n          name=\"xTiles\"\r\n          min=\"1\"\r\n          max=\"50\"\r\n        />\r\n        <br />\r\n        <label>Y nº of tiles: </label>\r\n        <input\r\n          value={yTiles}\r\n          onChange={(e) => setyTiles(e.target.value)}\r\n          type=\"number\"\r\n          name=\"yTiles\"\r\n          min=\"1\"\r\n          max=\"50\"\r\n        />\r\n        <br />\r\n        <button type=\"submit\">Generate new Map!</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewMapForm;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Actions from \"../Actions\";\r\n\r\nconst Tile = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const draggedElement = useSelector((state) => state.draggedElement);\r\n\r\n  const tileType = props.tileType;\r\n  const index = props.index;\r\n  const imgUrl = tileType\r\n    ? process.env.PUBLIC_URL + \"/images/\" + tileType\r\n    : process.env.PUBLIC_URL + \"/images/empty.png\";\r\n\r\n  const onDragOver = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const onDrop = (event) => {\r\n    const y = event.target.parentNode.parentNode.parentNode.getAttribute(\r\n      \"index\"\r\n    );\r\n    const x = event.target.parentNode.parentNode.getAttribute(\"index\");\r\n    dispatch({\r\n      type: Actions.PLACE_TILE,\r\n      x: x,\r\n      y: y,\r\n      tileName: draggedElement,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <td index={index}>\r\n      <div\r\n        onDrop={(event) => onDrop(event)}\r\n        onDragOver={(event) => onDragOver(event)}\r\n      >\r\n        <img src={imgUrl} />\r\n      </div>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst AwesomeMap = (props) => {\r\n  const tiles = useSelector((state) => state.awesomeMap);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"awesome-map\">{tiles.map(renderMapRow)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderMapRow = (tileRow, index) => {\r\n  return (\r\n    <tr key={index} index={index}>\r\n      {tileRow.map((tileType, columnIndex) => {\r\n        return <Tile tileType={tileType} index={columnIndex} />;\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default AwesomeMap;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Actions from \"../Actions\";\r\n\r\nconst TilesGallery = (props) => {\r\n  const tileTypes = props.tileTypes;\r\n  const dispatch = useDispatch();\r\n\r\n  const onDrag = (event, tileName) => {\r\n    event.preventDefault();\r\n    dispatch({\r\n      type: Actions.CHANGE_DRAGGED_ELEMENT,\r\n      draggedElement: tileName,\r\n    });\r\n  };\r\n\r\n  const clickNewTile = (tileType) => {\r\n    alert(tileType);\r\n  };\r\n\r\n  return (\r\n    <div className=\"tiles-gallery\" aria-label=\"Tiles\">\r\n      {tileTypes.map((tileName) => {\r\n        var tileType = process.env.PUBLIC_URL + \"/images/\" + tileName;\r\n        return (\r\n          <div draggable onDrag={(event) => onDrag(event, tileName)}>\r\n            <img src={tileType}></img>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TilesGallery;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport NewMapForm from \"./components/NewMapForm\";\n\nimport AwesomeMap from \"./components/Map\";\nimport TilesGallery from \"./components/TilesGallery\";\n\nconst tileTypes = [\"grass.png\", \"water.png\"];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AwesomeMap />\n        <TilesGallery tileTypes={tileTypes} />\n        <NewMapForm />\n        <p>Welcome to Awesome Mapper!</p>\n        This project is being developed by\n        <a\n          className=\"App-link\"\n          href=\"https://abujalance.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Abujalance\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ActionTypes from \"../Actions\";\r\nconst initialState = {\r\n  awesomeMap: [\r\n    [\"\", \"\", \"\"],\r\n    [\"\", \"\", \"\"],\r\n    [\"\", \"\", \"\"],\r\n  ],\r\n  draggedElement: \"\",\r\n};\r\nexport default function mapReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ActionTypes.CREATE_MAP:\r\n      const xSize = action.xSize;\r\n      const ySize = action.ySize;\r\n      return { ...state, awesomeMap: createNewMap(xSize, ySize) };\r\n    case ActionTypes.CHANGE_DRAGGED_ELEMENT:\r\n      return { ...state, draggedElement: action.draggedElement };\r\n    case ActionTypes.PLACE_TILE:\r\n      const tileName = action.tileName;\r\n      const x = action.x;\r\n      const y = action.y;\r\n      return {\r\n        ...state,\r\n        awesomeMap: insertTile(x, y, tileName, state.awesomeMap),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst createNewMap = (x, y) => {\r\n  var newMap = new Array(y);\r\n  for (var i = 0; i < y; i++) {\r\n    var row = [];\r\n    for (var j = 0; j < x; j++) {\r\n      row.push(\"\");\r\n    }\r\n    newMap[i] = row;\r\n  }\r\n\r\n  return newMap;\r\n};\r\n\r\nconst insertTile = (x, y, tileName, map) => {\r\n  console.log(\"Inserting\");\r\n  console.table(map);\r\n  var newMap = [...map];\r\n  newMap[y][x] = tileName;\r\n  console.table(newMap);\r\n  return newMap;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport mapReducer from \"./reducers/mapReducer\";\n\nconst store = createStore(mapReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}